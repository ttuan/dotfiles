" Clean .vimrc file, remove unused configuration - https://github.com/ttuan/dotfiles/blob/08ff68e93487ed8216bc614d95d0f63d40734f5a/vim/vimrc

"================  Base =====================
set nocompatible                                    " Use Vim settings, rather than Vi settings.
filetype plugin indent on                           " Load ftplugins and indent files
syntax on                                           " Enable syntax highlighting

set shell=zsh
set mouse=a                                         " Enable mouse reporting
set clipboard^=unnamed,unnamedplus                  " Share clipboard between Vim and OS
set history=10000                                   " Set command line history limit
set backspace=eol,start,indent                      " Configure backspace so it acts as it should actvv
set whichwrap+=<,>,h,l,[,]                          " Press keys to move the pre/next line after reaching first/last char in the line
set omnifunc=syntaxcomplete#Complete
set splitright
set splitbelow

set encoding=utf-8                                  " The encoding displayed
set fileencodings=ucs-bom,utf-8,sjis,euc-jp,default " The encoding written to file

set incsearch                                       " Find the next match as we type the search
set hlsearch                                        " Highlight searches by default
set ignorecase                                      " Search case insensitive
set smartcase                                       " But not when contain a uppercase char

set number                                          " Line number are good
set relativenumber                                  " Relative number to quickly run command
set cursorline
set showcmd                                         " Show incomplete commands at the bottom
set showmode                                        " Show current mode at the bottom

set noswapfile                                      " Centralize backup, swap and undo file
set nobackup
set nowb

set wildmenu                                        " Enable a menu at the bottom of vim/gvim window
set wildignore=*.o,*~,*.pyc,*/.git/*,*/.DS_Store

"================  Plugins =====================
"Auto install Vim Plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

"\\ Apperance
Plug 'scrooloose/nerdtree'
Plug 'morhetz/gruvbox'
Plug 'jpo/vim-railscasts-theme'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

"\\ Searching
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'rking/ag.vim'
Plug 'pbogut/fzf-mru.vim'

"\\ AutoComplete
Plug 'Valloric/YouCompleteMe'

"\\ Actions
Plug 'easymotion/vim-easymotion'      " Moving around
Plug 'tpope/vim-commentary'           " Comment
Plug 'godlygeek/tabular'              " Text filtering and alignment
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-repeat'
Plug '907th/vim-auto-save'
" Plug 'tpope/vim-endwise'

"\\ Vim + Tmux
Plug 'christoomey/vim-tmux-navigator' " Moving between tmux & vim: https://gist.github.com/mislav/5189704
Plug 'benmills/vimux'

"\\ Git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

"\\ Snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'ttuan/my-vim-snippets'

"\\ Operators
Plug 'tpope/vim-surround'              "  s command like surround
Plug 'vim-scripts/ReplaceWithRegister' "  gr to replace with yanked text

"\\ Text objects
Plug 'michaeljsmith/vim-indent-object' "  For ident object like python coffescript: ii and ai
Plug 'kana/vim-textobj-user'           "  Addition to use vim text obj rubyblock
" Plug 'nelstrom/vim-textobj-rubyblock'  "  Ruby text object: ir and ar
Plug 'kana/vim-textobj-line'           "  Line textobj: al and il
Plug 'whatyouhide/vim-textobj-erb'     "  erb text object: aE and iE
Plug 'machakann/vim-textobj-delimited' "  Delimited text object: ad and id

"\\ Ruby on Rails
Plug 'tpope/vim-rails'
Plug 'vim-ruby/vim-ruby'

"\\ Python
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }

"\\ Frontend
Plug 'mattn/emmet-vim'
Plug 'pangloss/vim-javascript'

"\\ Markdown
" Plug 'plasticboy/vim-markdown'

"\\ Nodejs
" Plug 'moll/vim-node'

Plug 'wakatime/vim-wakatime'
call plug#end()

" ================ Appearance ====================

set numberwidth=3
set t_Co=256
colorscheme gruvbox
set background=dark

set guifont=C@nsolas:h12:w6
set guifont=inconsolata
set guifontwide=FixedSys:h18
set guioptions=egmrL
set tw=80
set tabstop=2 shiftwidth=2 expandtab autoindent
set showbreak=...                                 " Display ... as wrap break
set showmatch
set wrap linebreak nolist                         " Proper wrapping
set cursorline cursorcolumn                       " Slim checker

"\\ Folding settings
" Use zi, za, zc, zR, zM, zv
set foldmethod=indent                             " Groups of lines with the same indent form a fold
set foldnestmax=3                                 " Set deepest folding to 3 levels
set nofoldenable                                  " Don't fold by default

"\\ Tab status line
set guitablabel=%t

"\\ Check file change and reload every 4 seconds
set autoread
au CursorHold * checktime

"\\ Ignore redraw when using tmux
if &term =~ '256color'
  set t_ut=
endif

" ================ Custom Mappings & Actions =====================
let mapleader=" " " Set Space for Leader key

" Quickly edit .vimrc file
nmap <Leader>v :e ~/.vimrc<CR>
" Source .vimrc file
noremap <Leader><Leader>s :so ~/.vimrc<CR>
" Swap between the last two files
nnoremap <Leader><Leader>c <c-^>
" Quickly select text you just pasted
noremap gV `[v`]
" Select all file
nnoremap <Leader>a ggVG
" No highlight after searching
nnoremap <Leader>n :noh<CR>
" Remap VIM 0 to first non-blank character
map B ^
map E $
" Y to copy to end of line
map Y y$
nnoremap c<space> ct<space>

"\\ Open file in same directory
nnoremap ,e :e <C-R>=expand('%:p:h') . '/'<CR>
nnoremap ,t :tabe <C-R>=expand("%:p:h") . "/" <CR>
nnoremap ,s :split <C-R>=expand("%:p:h") . "/" <CR>
nnoremap ,v :vsplit <C-R>=expand("%:p:h") . "/" <CR>

"\\ Resizing Windows
nnoremap <Leader><Leader>= <C-w>=
nnoremap <Leader><Leader><UP> <C-W>_
nnoremap <Leader><Leader><DOWN> <C-W>=
nnoremap <Leader><Leader><LEFT> <C-W>\|
nnoremap <Leader><Leader><RIGHT> <C-W>\|

nnoremap <Leader><Leader>k <C-w>+10
nnoremap <Leader><Leader>j <C-w>-10
nnoremap <Leader><Leader>h <C-w><10
nnoremap <Leader><Leader>l <C-w>>10

" Move a line of text using Leader+[jk]
nmap <Leader>j mz:m+<cr>`z
nmap <Leader>k mz:m-2<cr>`z
vmap <Leader>j :m'>+<cr>`<my`>mzgv`yo`z
vmap <Leader>k :m'<-2<cr>`>my`<mzgv`yo`z

"\\ Operator with a panel
nnoremap <Leader>t :tabnew<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>p o<ESC>p`[v`]

"\\ Use C-p and C-n for calling command in history
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

"\\ Disable arrow key
map <Left> :echo "no!"<cr>
map <Right> :echo "no!"<cr>
map <Up> :echo "no!"<cr>
map <Down> :echo "no!"<cr>

"\\ Delete all trailing space when saving file
autocmd BufWritePre * :%s/\s\+$//e

"\\ Force save file when I forgot running 'sudo vim file'
"\\ With Great Power Comes Great Responsibility
cmap w!! %!sudo tee > /dev/null %

"\\ Go to next/prev project search result
nnoremap <Leader>> :cnext<CR>
nnoremap <Leader>< :cprev<CR>

" ================ Plugins Config ====================

"\\ Vim Plug
nnoremap <Leader>P :so %<CR>:PlugInstall<CR>:q<CR>

"------------------------------------------------------
"\\ Rails.vim
let g:rails_projections = {
      \ "app/controllers/*_controller.rb": {
      \   "test": [
      \     "spec/controllers/{}_controller_spec.rb",
      \     "spec/requests/{}_spec.rb"
      \   ],
      \ },
      \ "spec/requests/*_spec.rb": {
      \   "alternate": [
      \     "app/controllers/{}_controller.rb",
      \   ],
      \ }}

map <Leader>em :Emodel<space>
map <Leader>ev :Eview<space>
map <Leader>ec :Econtroller<space>
map <Leader>eh :Ehelper<space>

"------------------------------------------------------
"\\ Autosave
let g:auto_save = 1
let g:auto_save_silent = 1
let g:auto_save_in_insert_mode = 1

"------------------------------------------------------
"\\ Emmet-vim
imap hh <C-y>,

"------------------------------------------------------
"\\ NERDTree
map - :NERDTreeToggle<CR>
" autocmd VimEnter * NERDTreeFind
map ] :NERDTreeFind<CR>

"------------------------------------------------------
"\\ Vim Commentary
nmap cm gc

"------------------------------------------------------
"\\ You Complete Me
let g:ycm_global_ycm_extra_conf = '~/.vim/plugged/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
set shortmess+=c

"------------------------------------------------------
"\\ Ruby txet object
runtime macros/matchit.vim

"------------------------------------------------------
"\\ Ag
"\\ To ignore search with folder, use option --ignore-dir={dir1,dir2}
map <Leader>/ :Ag<Space>

"\\ Search in project with word in clipboard
nmap <Leader><Leader>d :Ag <c-r>"<CR>

"\\ Search with specific file type
nmap <Leader><Leader>v :Ag --ruby<Space>

let g:ag_working_path_mode="r"
set grepprg=ag
let g:grep_cmd_opts = '--line-numbers --noheading'

"------------------------------------------------------
"\\ UltiSnips
let g:UltiSnipsExpandTrigger = "<C-l>"

"------------------------------------------------------
"\\ Vim Airline
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

"------------------------------------------------------
"\\ Easy Motion
let g:EasyMotion_do_mapping = 0
map <Leader> <Plug>(easymotion-prefix)

map <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>W <Plug>(easymotion-overwin-w)
map <Leader>ee <Plug>(easymotion-bd-e)
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>h <Plug>(easymotion-linebackward)

nmap <Leader>s <Plug>(easymotion-s2)

"------------------------------------------------------
"\\ Vim Fugitive
nmap <Leader>gs :G<CR>
nnoremap <Leader>bl :Git blame<CR>

nmap <Leader>gc :G commit<CR>

nmap <Leader>gf :diffget //2<CR>
nmap <Leader>gj :diffget //3<CR>

"------------------------------------------------------
"\\ Gitgutter
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '⚡'
let g:gitgutter_sign_removed = '✖'
let g:gitgutter_map_keys = 0
let g:gitgutter_max_signs = 200

"------------------------------------------------------
"\\ Python-Mode
" au CompleteDone * pclose
" let g:pymode_python = 'python3'
" let g:pymode_doc = 0
" let g:pymode_options_max_line_length=120

"------------------------------------------------------
"\\ FZF
nnoremap <silent> <C-f> :Files<CR>
nnoremap <C-p> :GFiles<CR>
nnoremap <silent> <C-s> :Snippets<CR>

nnoremap <Leader>fg :GFiles?<CR>
nnoremap <Leader>fn :Buffers<CR>
nnoremap <Leader>fc :Commits<CR>
nnoremap <Leader>fm :Marks<CR>
nnoremap <Leader>fC :BCommits<CR>      " Git commits for current buffer
nnoremap <Leader>ft :Tags<CR>

let g:fzf_layout = { 'down': '40%' }

"------------------------------------------------------
"\\ FZFMRU
nnoremap <Leader>mr :FZFMru<CR>

"------------------------------------------------------
"\\ Vmux - Run, Forrest, Run
" Run last command executed by VimuxRunCommand
nnoremap <silent> <Leader>rl :VimuxRunLastCommand<CR>
" Run rspec file
nnoremap <silent> <Leader>rs :call VimuxRunCommand("clear; rspec " .  bufname("%"))<CR>
" Run rspec test case
nnoremap <silent> <Leader>rt :call VimuxRunCommand("clear; rspec " .  bufname("%") . ":" .  line("."))<CR>
" Run bundle install
nnoremap <silent> <Leader>bi :call VimuxRunCommand("clear; bundle install")<CR>
" Run rubocop
nnoremap <silent> <Leader>rr :call VimuxRunCommand("clear; bundle exec rubocop app/ lib/ db/migrate/ config/")<CR>

" Send command to panel
nnoremap <silent> <Leader>vp :VimuxPromptCommand<CR>
" Interrupt any command running in the runner pane
nnoremap <silent> <Leader>vx :VimuxInterruptRunner<CR>
" Zoom the runner pane (use <bind-key> z to restore runner pane)
nnoremap <silent> <Leader>vz :call VimuxZoomRunner()<CR>
" Clear the terminal screen of the runner pane.
nnoremap <silent> <Leader>v<C-l> :VimuxClearTerminalScreen<CR>

nnoremap <silent> <Leader>rb :call VimuxRunCommand("clear; ruby " . bufname("%"))<CR>

"------------------------------------------------------
"\\ Tabular
if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:\zs<CR>
  vmap <Leader>a: :Tabularize /:\zs<CR>
endif

" ================ Custom Functions ===================
"\\ Edit a temporary file
nnoremap <Leader><Leader>tp :exec "e " . tempname()<cr>

"\\ Auto close windows when COMMIT_EDITMSG git file --> Quickly push + rebase with git
function! Close_git_message()
  let l:filename = @%
  if (filename == ".git/COMMIT_EDITMSG")
    execute 'quitall'
  endif
endfunction
autocmd VimEnter * :call Close_git_message()

"\\ Rename current file
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <Leader>rnf :call RenameFile()<cr>

"\\ Auto refresh firefox active tab when I save a file, require refresh_browser.sh script
" autocmd BufWriteCmd *.html,*.css,*.rb,*.erb :call Refresh_browser()
function! Refresh_browser()
  if &modified
    write
    silent !refresh_firefox
  endif
endfunction

command! -nargs=1 Silent
\   execute 'silent !' . <q-args>
\ | execute 'redraw!'

"\\ Go to current line in github
function! GoGithubLine()
  let current_file = @%
  let current_line = line('.')
  execute 'Silent goGithubLine' current_file current_line
endfunction
nnoremap <Leader><Leader>ggl :call GoGithubLine()<cr>

"\\ Go to Github with commit hash
function! GoGithubCommit()
  let commit_hash = expand("<cword>")
  execute 'Silent goGithubCommit' commit_hash
endfunction
nnoremap <Leader><Leader>ggc :call GoGithubCommit()<cr>

"\\ Open current file on google chrome
function! OpenCurrentFile()
  let current_file = @%
  execute 'Silent open -a "Google Chrome"' current_file
endfunction
nnoremap <Leader><Leader>of :call OpenCurrentFile()<cr>
