" ============ General Config ===============

set nocompatible                         " Use Vim settings, rather than Vi settings.
filetype plugin indent on                " Load ftplugins and indent files
syntax on                                " Enable syntax highlighting

set clipboard^=unnamed,unnamedplus       " Share clipboard between Vim and OS

set number                               " Line number are good
set relativenumber                       " Relative number to quickly run command
set history=10000                        " Set command line history limit
set showcmd                              " Show incomplete commands at the bottom
set showmode                             " Show current mode at the bottom

"\\ encoding
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,sjis,euc-jp,default

set cursorline
set shell=zsh
set splitright
set splitbelow
set mouse=a

"\\ search
set incsearch                            " Find the next match as we type the search
set hlsearch                             " Highlight searches by default
set ignorecase                           " Search case insensitive
set smartcase                            " But not when contain a uppercase char

"\\ Turn on wild menu
set wildmenu
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

"\\ Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

"================ Vim Plug =====================
"Auto install Vim Plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

"\\ Preinstall function to build plugin -- copied from Mr.Tux dotfiles
function! BuildYCM(info)
  " info is a dictionary with 3 fields
  " - name:   name of the plugin
  " - status: 'installed', 'updated', or 'unchanged'
  " - force:  set on PlugInstall! or PlugUpdate!
  if a:info.status == 'installed' || a:info.force
    !./install.py --clang-completer --gocode-completer --tern-completer --racer-completer
  endif
endfunction

"\\ Vim behavior plugin
" Plug 'Valloric/YouCompleteMe', {'do': function('BuildYCM'), 'for': ['cpp', 'python', 'javascript', 'go', 'ruby']}
Plug 'Valloric/YouCompleteMe'
Plug 'rking/ag.vim'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'ttuan/my-vim-snippets'
" Plug 'scrooloose/syntastic'
Plug 'Townk/vim-autoclose'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" Plug 'kien/ctrlp.vim'

"\\ Vim apperance
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
" Plug 'YorickPeterse/happy_hacking.vim'
Plug 'jpo/vim-railscasts-theme'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'christoomey/vim-tmux-navigator'
Plug 'benmills/vimux'

"\\ Vim motion
Plug 'easymotion/vim-easymotion'
Plug 'takac/vim-hardtime'

" More operator for vim
Plug 'tpope/vim-surround'                     "s command like surround
Plug 'vim-scripts/ReplaceWithRegister'        "gr to replace with yanked text

" Vim Text object
Plug 'michaeljsmith/vim-indent-object'        "For ident object like python coffescript: ii and ai
Plug 'kana/vim-textobj-user'                  "Addition to use vim text obj rubyblock
Plug 'nelstrom/vim-textobj-rubyblock'         "Ruby text object: ir and ar
Plug 'kana/vim-textobj-line'                  "Line textobj: al and il
Plug 'whatyouhide/vim-textobj-erb'            "erb text object: aE and iE
Plug 'machakann/vim-textobj-delimited'        "Delimited text object: ad and id

"\\ Vim for ruby dev
Plug 'tpope/vim-rails'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-bundler'
Plug 'thoughtbot/vim-rspec'
Plug 'sunaku/vim-ruby-minitest'

"\\ Vim for front-end dev
Plug 'mattn/emmet-vim'
Plug 'slim-template/vim-slim'

"\\ Markdown
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'

"\\ Ctags
Plug 'craigemery/vim-autotag'

"\\ Other Plugin
Plug '907th/vim-auto-save'

"\\ Nodejs
Plug 'moll/vim-node'

"\\ AngularJS
Plug 'pangloss/vim-javascript'
Plug 'burnettk/vim-angular'

"\\ VueJS
Plug 'posva/vim-vue'

"\\ Angular2
" Plug 'leafgarland/typescript-vim'

"\\ Python and Django
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
Plug 'tweekmonster/django-plus.vim'

Plug 'wakatime/vim-wakatime'

"\\ Highlight for .toml file
Plug 'cespare/vim-toml'

call plug#end()

" ================ Apperance ====================

set numberwidth=3
set t_Co=256
colorscheme railscasts
set guifont=C@nsolas:h12:w6
set guifont=inconsolata
set guifontwide=FixedSys:h18
set guioptions=egmrL
set tw=80
set showbreak=...                                 " Display ... as wrap break
set showmatch
set wrap linebreak nolist                         " Proper wrapping
set cursorline cursorcolumn                       " Slim checker

"\\ Folding settings
" Use zi, za, zc, zR, zM, zv
set foldmethod=indent                             " Groups of lines with the same indent form a fold
set foldnestmax=3                                 " Set deepest folding to 3 levels
set nofoldenable                                  " Don't fold by default

"\\ Tab status line
set guitablabel=%t


" ================ Behavior =====================

"\\ Centralize backup, swap and undo file
set noswapfile
set nobackup
set nowb
au FocusLost * :wa

"\\ Auto save files
autocmd BufLeave, FocusLost * silent! wall         " Some terminal doesn't support FoucusLost
inoremap <Esc> <Esc>:w<CR>

"\\ Check file change and reload every 4 seconds
set autoread
au CursorHold * checktime

"\\ Y to copy to end of line
map Y y$

"\\ Indentation settings
set tabstop=2 shiftwidth=2 expandtab autoindent

"\\ Allow backspacing over everything in insert mode
set backspace=indent,eol,start

"\\ ex_mode
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

"\\ Ignore redraw when using tmux
if &term =~ '256color'
  set t_ut=
endif

"\\ Open file in same directory
nnoremap ,e :e <C-R>=expand('%:p:h') . '/'<CR>
nnoremap ,t :tabe <C-R>=expand("%:p:h") . "/" <CR>
nnoremap ,s :split <C-R>=expand("%:p:h") . "/" <CR>

" ================ Mappings ====================

let mapleader=" " " Set Space for Leader key

"\\ Resizing Windows
nnoremap <Leader><Leader>= <C-w>=
nnoremap <Leader><Leader>k <C-w>+10
nnoremap <Leader><Leader>j <C-w>-10
nnoremap <Leader><Leader>h <C-w><10
nnoremap <Leader><Leader>l <C-w>>10

"\\ Switch between panels
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

"\\ Operator with a panel
nnoremap <Leader>t :tabnew<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>x :x<CR>
nnoremap <Leader>p o<ESC>p`[v`]

"\\ Disable arrow key
map <Left> :echo "no!"<cr>
map <Right> :echo "no!"<cr>
map <Up> :echo "no!"<cr>
map <Down> :echo "no!"<cr>

"\\ Quickly select text you just pasted
noremap gV `[v`]

"\\ Search
nnoremap <Leader>n :noh<CR>

"\\ Insert pasted text at end of lineend
nnoremap <Leader><Leader>eol $p

"\\ Vim file
nmap <Leader>v :e ~/.vimrc<CR> " Quickly edit .vimrc file
noremap <Leader><Leader>s :so ~/.vimrc<CR> " Source .vimrc file

"\\ Switch between files
nnoremap <tab> :bp<CR> " Previous buffer file
nnoremap <S-tab> :bn<CR> " Next buffer file
nnoremap <Leader><Leader>c <c-^> " The last two files

"\\ Select all file
nnoremap <Leader>a ggVG

"\\ Move to end of line in insert mode
inoremap <C-m> <Esc>A

" Remap VIM 0 to first non-blank character
map B ^
map E $

nnoremap c<space> ct<space>
" Use ; instead of :
" nmap ; :

" Move a line of text using ALT+[jk]
nmap <Leader>j mz:m+<cr>`z
nmap <Leader>k mz:m-2<cr>`z
vmap <Leader>j :m'>+<cr>`<my`>mzgv`yo`z
vmap <Leader>k :m'<-2<cr>`>my`<mzgv`yo`z

" Search in project with word in clipboard
nmap <Leader><Leader>d :Ag <c-r>"<CR>

:command! -complete=file -nargs=1 Rpdf :r !pdftotext -nopgbrk <q-args> -
:command! -complete=file -nargs=1 Rpdf :r !pdftotext -nopgbrk <q-args> - |fmt -csw78

" :call delete(expand('%')) | bdelete!

"---------------  Make Vim like IDE -------------------------
"---------------  Run, Forrest, Run -------------------------

"\\ Python
nnoremap <buffer> <F9> :exec '!python' shellescape(@%, 1)<cr>

"\\ C
nnoremap <Leader>i :!gcc -o .a.out % && ./.a.out<CR>

"\\ Ruby
nmap <Leader>E :!ruby %<cr>


"=============== Extends behaviors =========================

"\\ Quick swap character, word and paragraph
nnoremap <silent> gw "_yiw:s/\(\%#\w\+\)\(\W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>
nnoremap <silent> gw "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>
nnoremap g{ {dap}p{

" Change cusor shape in different mode
au VimLeave * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape block"
" au VimEnter * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape ibeam"

"\\ Delete all trailing space when saving file
autocmd BufWritePre * :%s/\s\+$//e

"\\ Force save file when I forgot running 'sudo vim file'
"\\ With Great Power Comes Great Responsibility
cmap w!! %!sudo tee > /dev/null %

"\\ Create folder
map <Leader>cf :!mkdir -p<Space>

"\\ Delete current file
" map <Leader><Leader>D :call delete(expand('%')) | bdelete!

"\\ Saved Macros
let @w = "I* j"

" ================ Plugin Config ====================

"\\ Vundle
nnoremap <Leader>P :so %<CR>:PlugInstall<CR>:q<CR>

"------------------------------------------------------

"\\ Rails.vim
map <Leader>rg :Rails generate<space>
map <Leader>rd :Rails destroy<space>

map <Leader>em :Emodel<space>
map <Leader>ev :Eview<space>
map <Leader>ec :Econtroller<space>
map <Leader>eh :Ehelper<space>
map <Leader>el :Elocale<space>
map <Leader>er :Emailer<space>
map <Leader>ed :Edecorator<space>
map <Leader>es :Esupport<space>
map <Leader>eo :Eservice<space>
map <Leader>ep :Espec<space>

map <Leader>ej :Ejavascript<space>
map <Leader>et :Estylesheet<space>
map <Leader>ey :Elayout<space>

map <Leader>ee :Eenvironment<space>
map <Leader>ei :Einitializer<space>
map <Leader>ew :Emigration<space>

map <Leader>ef :Efactory<space>
map <Leader>eu :Eunittest<space>
map <Leader>et :Efunctionaltest<space>

"------------------------------------------------------

"\\ Autosave
let g:auto_save = 1
let g:auto_save_silent = 1
let g:auto_save_in_insert_mode = 0

"------------------------------------------------------

"\\ Emmet-vim
imap hh <C-y>,

"------------------------------------------------------

"\\ AutoClose
" Bring back Up and Down key in Insert Mode
if !has("gui_running")
  let g:AutoClosePreservDotReg = 0
endif

"------------------------------------------------------

"\\ NERDTree
map <F5> :NERDTreeToggle<CR>
" autocmd VimEnter * NERDTree
" autocmd VimEnter * wincmd p

"------------------------------------------------------
nmap <F12> :TagbarToggle<CR>

"\\ Vim Commentary
nmap cm gc

"------------------------------------------------------

"\\ You Complete Me
let g:ycm_global_ycm_extra_conf = '~/.vim/plugged/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
set shortmess+=c

"------------------------------------------------------

"\\ Ruby txet object
runtime macros/matchit.vim

"------------------------------------------------------

"\\ Syntastic
set statusline+=%#warningmsg#
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"------------------------------------------------------

"\\ Ack
"\\ To ignore search with folder, use option --ignore-dir={dir1,dir2}
map <Leader>g :Ag<Space>
let g:ag_working_path_mode="r"
set grepprg=ag
let g:grep_cmd_opts = '--line-numbers --noheading'

"------------------------------------------------------

"\\ UltiSnips
" let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
" let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<c-l>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

"------------------------------------------------------

"\\ Vim Hardmode
nnoremap <Leader>y <Esc>:call ToggleHardMode()<CR>
" let g:hardtime_default_on = 1
" let g:hardtime_maxcount = 3

"------------------------------------------------------

"\\ Vim Airline
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

"------------------------------------------------------

"\\ Easy Motion
let g:EasyMotion_do_mapping = 0
map <Leader> <Plug>(easymotion-prefix)

map <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>W <Plug>(easymotion-overwin-w)
map <Leader>e <Plug>(easymotion-bd-e)

map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>h <Plug>(easymotion-linebackward)

" map / <Plug>(easymotion-sn)
" omap / <Plug>(easymotion-tn)

nmap <Leader>s <Plug>(easymotion-s2)

"------------------------------------------------------

"\\ RSpec.vim
nnoremap <Leader>rs :call RunCurrentSpecFile()<CR>
nnoremap <Leader>ras :call RunAllSpecs()<CR>
map <Leader>rns :call RunNearestSpec()<CR>
map <Leader>rl :call RunLastSpec()<CR>

"------------------------------------------------------

"\\ Vim Fugitve
nnoremap <Leader>bl :Gblame<CR>

"-----------------------------------------------------

"CtrlP
" nnoremap <Leader>t :CtrlPTag<cr>
" nnoremap <silent> <c-p> :ClearCtrlPCache<cr>\|:CtrlP<cr>
" let g:ctrlp_map = '<c-p>'
" let g:ctrlp_cmd = 'CtrlP'
" let g:ctrlp_user_command = 'find %s -type f'
" let g:ctrlp_use_caching = 0
" let g:ctrlp_custom_ignore = {
"     \ 'dir':  'node_modules\|.git$\|\.hg$\|\.svn$\|\.yardoc\|public\/images\|public\/system\|public\/upload\|data\|log\|tmp$\|backup$\|images$\|public\/assets',
"     \ 'file': '\.exe$\|\.so$\|\.dat$\|\.cache$'
" \ }
" if exists("g:ctrlp_user_command")
" unlet g:ctrlp_user_command
" endif
" set wildignore+=*\\vendor\\**
" let g:ctrlp_prompt_mappings = {
"     \ 'AcceptSelection("v")': ['<F2>', '<RightMouse>'],
" \ }


"------------------------------------------------------
" \\ Gitgutter
"
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '⚡'
let g:gitgutter_sign_removed = '✖'
let g:gitgutter_map_keys = 0
let g:gitgutter_max_signs = 200

"------------------------------------------------------
" \\ Python-Mode

au CompleteDone * pclose
let g:pymode_python = 'python3'
let g:pymode_doc = 0
let g:pymode_options_max_line_length=120

"------------------------------------------------------
" \\ TypeScript Vim
let g:typescript_compiler_binary = 'tsc'
let g:typescript_compiler_options = ''
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow

"------------------------------------------------------
" "\\ FZF
nnoremap <C-p> :GFiles<CR>
imap <c-x><c-l> <plug>(fzf-complete-line)
nnoremap <Leader>fc :Commits<CR>
nnoremap <Leader>fC :BCommits<CR>
nnoremap <Leader>fl :Lines<CR>
nnoremap <Leader>ft :Tags<CR>
nnoremap <Leader>fh :History:<CR>
nnoremap <Leader>fH :History/<CR>
nnoremap <silent> <leader>/ :execute 'Ag ' . input('Ag/')<CR>

"------------------------------------------------------

"\\ Ctags
" autocmd BufWritePost *  :UpdateTags
" nnoremap <f5> :!ctags -R --exclude=.git --exclude=log *<cr>

"------------------------------------------------------
"\\ Vim Ruby Minitest

set completefunc=syntaxcomplete#Complete

" ================ My Extend Functions ====================

"\\ Auto refresh firefox active tab when I save a file, require refresh_browser.sh script

" autocmd BufWriteCmd *.html,*.css,*.rb,*.erb :call Refresh_browser()
function! Refresh_browser()
  if &modified
    write
    silent !refresh_firefox
  endif
endfunction

"\\ Auto close windows when COMMIT_EDITMSG git file --> Quickly push + rebase with git
function! Close_git_message()
  let l:filename = @%
  if (filename == ".git/COMMIT_EDITMSG")
    execute 'quitall'
  endif
endfunction
autocmd VimEnter * :call Close_git_message()

" Rename current file
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <Leader>rnf :call RenameFile()<cr>

command! -nargs=1 Silent
\   execute 'silent !' . <q-args>
\ | execute 'redraw!'

" Go to current line in github
function! GoGithubLine()
  let current_file = @%
  let current_line = line('.')
  execute 'Silent goGithubLine' current_file current_line
endfunction
nnoremap <Leader><Leader>ggl :call GoGithubLine()<cr>

" Go to Github with commit hash
function! GoGithubCommit()
  let commit_hash = expand("<cword>")
  execute 'Silent goGithubCommit' commit_hash
endfunction
nnoremap <Leader><Leader>ggc :call GoGithubCommit()<cr>

" Open current file on google chrome
function! OpenCurrentFile()
  let current_file = @%
  execute 'Silent google-chrome' current_file
endfunction
nnoremap <Leader><Leader>of :call OpenCurrentFile()<cr>


function! ViewHtmlText(url)
  if !empty(a:url)
    new
    setlocal buftype=nofile bufhidden=hide noswapfile
    execute 'r !elinks ' . a:url . ' -dump -dump-width ' . winwidth(0)
    1d
  endif
endfunction
" Save and view text for current html file.
nnoremap <Leader>vhtml :update<Bar>call ViewHtmlText(expand('%:p'))<CR>
" View text for visually selected url.
vnoremap <Leader>vhfs y:call ViewHtmlText(@@)<CR>
" View text for URL from clipboard.
" On Linux, use @* for current selection or @+ for text in clipboard.
nnoremap <Leader>vhfu :call ViewHtmlText(@+)<CR>
